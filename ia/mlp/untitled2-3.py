# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cndFrjTHXc2FjOJhXPBgmq_01pds0I4g
"""



import numpy as np
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Lista completa de combinações binárias para Braille
braille_combinations = [
    [1, 0, 0, 0, 0, 0],  # 0
    [0, 1, 0, 0, 0, 0],  # 1
    [1, 1, 0, 0, 0, 0],  # 2
    [0, 0, 1, 0, 0, 0],  # 3
    [1, 0, 1, 0, 0, 0],  # 4
    [0, 1, 1, 0, 0, 0],  # 5
    [1, 1, 1, 0, 0, 0],  # 6
    [0, 0, 0, 1, 0, 0],  # 7
    [1, 0, 0, 1, 0, 0],  # 8
    [0, 1, 0, 1, 0, 0],  # 9
    [1, 1, 0, 1, 0, 0],  # 10
    [0, 0, 1, 1, 0, 0],  # 11
    [1, 0, 1, 1, 0, 0],  # 12
    [0, 1, 1, 1, 0, 0],  # 13
    [1, 1, 1, 1, 0, 0],  # 14
    [0, 0, 0, 0, 1, 0],  # 15
    [1, 0, 0, 0, 1, 0],  # 16
    [0, 1, 0, 0, 1, 0],  # 17
    [1, 1, 0, 0, 1, 0],  # 18
    [0, 0, 1, 0, 1, 0],  # 19
    [1, 0, 1, 0, 1, 0],  # 20
    [0, 1, 1, 0, 1, 0],  # 21
    [1, 1, 1, 0, 1, 0],  # 22
    [0, 0, 0, 1, 1, 0],  # 23
    [1, 0, 0, 1, 1, 0],  # 24
    [0, 1, 0, 1, 1, 0],  # 25
    [1, 1, 0, 1, 1, 0],  # 26
    [0, 0, 1, 1, 1, 0],  # 27
    [1, 0, 1, 1, 1, 0],  # 28
    [0, 1, 1, 1, 1, 0],  # 29
    [1, 1, 1, 1, 1, 0],  # 30
    [0, 0, 0, 0, 0, 1],  # 31
    [1, 0, 0, 0, 0, 1],  # 32
    [0, 1, 0, 0, 0, 1],  # 33
    [1, 1, 0, 0, 0, 1],  # 34
    [0, 0, 1, 0, 0, 1],  # 35
    [1, 0, 1, 0, 0, 1],  # 36
    [0, 1, 1, 0, 0, 1],  # 37
    [1, 1, 1, 0, 0, 1],  # 38
    [0, 0, 0, 1, 0, 1],  # 39
    [1, 0, 0, 1, 0, 1],  # 40
    [0, 1, 0, 1, 0, 1],  # 41
    [1, 1, 0, 1, 0, 1],  # 42
    [0, 0, 1, 1, 0, 1],  # 43
    [1, 0, 1, 1, 0, 1],  # 44
    [0, 1, 1, 1, 0, 1],  # 45
    [1, 1, 1, 1, 0, 1],  # 46
    [0, 0, 0, 0, 1, 1],  # 47
    [1, 0, 0, 0, 1, 1],  # 48
    [0, 1, 0, 0, 1, 1],  # 49
    [1, 1, 0, 0, 1, 1],  # 50
    [0, 0, 1, 0, 1, 1],  # 51
    [1, 0, 1, 0, 1, 1],  # 52
    [0, 1, 1, 0, 1, 1],  # 53
    [1, 1, 1, 0, 1, 1],  # 54
    [0, 0, 0, 1, 1, 1],  # 55
    [1, 0, 0, 1, 1, 1],  # 56
    [0, 1, 0, 1, 1, 1],  # 57
    [1, 1, 0, 1, 1, 1],  # 58
    [0, 0, 1, 1, 1, 1],  # 59
    [1, 0, 1, 1, 1, 1],  # 60
    [0, 1, 1, 1, 1, 1],  # 61
    [1, 1, 1, 1, 1, 1]  # 62
]

# Saídas correspondentes (0-62 para os símbolos Braille)
braille_labels = np.arange(63)

# Normalizar os dados
scaler = StandardScaler()
braille_combinations = scaler.fit_transform(braille_combinations)

X_train, X_test, y_train, y_test = train_test_split(braille_combinations, braille_labels, test_size=0.2, random_state=42)

# treinar a MLP
mlp = MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', max_iter=5000, random_state=42)
mlp.fit(X_train, y_train)

def predict_braille(inputs):
    inputs = scaler.transform(inputs)  # Normalizar os dados de entrada
    return mlp.predict(inputs)

print('Saida em ordem para 100 neuronios na primeira camada, 50 para segunda camada')
predicted_labels = predict_braille(braille_combinations)
for sample, label in zip(braille_combinations, predicted_labels):
    print(f"Saída prevista: {label}")

predictions

y_test