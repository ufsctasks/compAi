# -*- coding: utf-8 -*-
"""pokemon-CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PmR9eLlPcvPC03qXywtgzkS9ajU0wGsa
"""

from google.colab import files
from keras.preprocessing import image
import numpy as np
import pandas as pd
import os
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Carregar o arquivo CSV
pokemons = pd.read_csv('/content/sample_data/pokemon.csv')

# Diretório onde as imagens estão armazenadas
img_dir = "/content"

# Carregar as imagens e etiquetas
img_size = (32, 32)
images = []
labels = []

pokemons.head()

for index, row in pokemons.iterrows():
    img_path = os.path.join(img_dir, row['Name'] + '.png')
    if os.path.exists(img_path):
        img = image.load_img(img_path, target_size=img_size)
        img_array = image.img_to_array(img)
        images.append(img_array)
        labels.append(row['Type1'])
    else:
        print(f"Imagem {img_path} não encontrada.")

images = np.array(images)
labels = np.array(labels)

label_encoder = LabelEncoder()
labels = label_encoder.fit_transform(labels)
labels = to_categorical(labels)

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

X_train = X_train.astype("float32") / 255.0
X_test = X_test.astype("float32") / 255.0

cnn = Sequential()
cnn.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(32, 32, 3), activation="relu"))
cnn.add(MaxPooling2D(pool_size=(2, 2)))
cnn.add(Flatten())
cnn.add(Dense(units=128, activation="relu"))
cnn.add(Dense(units=len(label_encoder.classes_), activation="softmax"))

cnn.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

history = cnn.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2)

loss, accuracy = cnn.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy}")

# Gráficos de treinamento
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()